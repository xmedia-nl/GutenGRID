
/**************************** src/grid/components/grid-align-control.js ****************************/ 
import {
	ToolbarGroup,
	ToolbarButton,
	SelectControl,
} from '@wordpress/components';
import { useDispatch, useSelect } from '@wordpress/data';
import {
	justifyLeft,
	justifyCenter,
	justifyRight,
	alignWide,
	alignFull,
} from '@wordpress/icons';
import { __ } from '@wordpress/i18n';
import { useSupportsClassName } from '../utils/block-support';
const ALIGN_OPTIONS = [
	{ label: 'Start', value: 'start', icon: justifyLeft },
	{ label: 'Center', value: 'center', icon: justifyCenter },
	{ label: 'End', value: 'end', icon: justifyRight },
	{ label: 'Space-between', value: 'space-between', icon: alignWide },
	{ label: 'Stretch', value: 'stretch', icon: alignFull },
];

const getValueFromClass = (className = '', key) => {
	const match = className.match(new RegExp(`has-${key}-([a-z-]+)`));
	return match ? match[1] : '';
};

const replaceAlignClass = (className, key, value) => {
	const cleaned = className.replace(new RegExp(`has-${key}-[a-z-]+`, 'g'), '').trim();
	if (!value) return cleaned;
	return `${cleaned} has-${key}-${value}`.trim();
};

const GridAlignControl = ({ clientId, toolbar = false }) => {
	const { className = '' } = useSelect((select) =>
		select('core/block-editor').getBlockAttributes(clientId),
		[clientId]
	);
	const { updateBlockAttributes } = useDispatch('core/block-editor');

	const justifyValue = getValueFromClass(className, 'justify');
	const alignValue = getValueFromClass(className, 'align');
	const supportsClass = useSupportsClassName(clientId);

	const update = (key, value) => {
		const newClassName = replaceAlignClass(className, key, value);
		updateBlockAttributes(clientId, {
			className: newClassName,
			wrapperClassname: !supportsClass ? newClassName : undefined,
		});
	};

	if (toolbar) {
		return (
			<ToolbarGroup>
				{ALIGN_OPTIONS.map((option) => (
					<ToolbarButton
						key={`justify-${option.value}`}
						icon={option.icon}
						label={`Justify ${option.label}`}
						isPressed={justifyValue === option.value}
						onClick={() =>
							update('justify', justifyValue === option.value ? '' : option.value)
						}
					/>
				))}
			</ToolbarGroup>
		);
	}

	return (
		<>
			<SelectControl
				label={__('Justify content', 'gutengrid')}
				value={justifyValue}
				options={[
					{ label: __('Auto', 'gutengrid'), value: '' },
					...ALIGN_OPTIONS.map(({ label, value }) => ({ label, value })),
				]}
				onChange={(value) => update('justify', value)}
			/>
			<SelectControl
				label={__("Align content", 'gutengrid')}
				value={alignValue}
				options={[
					{ label: __('Auto', 'gutengrid'), value: '' },
					...ALIGN_OPTIONS.map(({ label, value }) => ({ label, value })),
				]}
				onChange={(value) => update('align', value)}
			/>
		</>
	);
};

export default GridAlignControl;

 

/**************************** src/grid/components/grid-background-control.js ****************************/ 
// grid-background-control.js
import {
    PanelBody,
    SelectControl,
    Button,
} from '@wordpress/components';
import {
    MediaUpload,
    __experimentalColorGradientControl as ColorGradientControl} from '@wordpress/block-editor';

import { __ } from '@wordpress/i18n';
import { useSelect, useDispatch } from '@wordpress/data';

const GridBackgroundControl = ({ clientId }) => {
    const {
        backgroundType,
        backgroundColorSlug,
        backgroundGradientSlug,
        backgroundImage,
        backgroundWidth,
    } = useSelect(
        (select) => select('core/block-editor').getBlockAttributes(clientId),
        [clientId]
    );

    const { updateBlockAttributes } = useDispatch('core/block-editor');

    const themeSettings = useSelect((select) => select('core/block-editor').getSettings());
    const themeColors = themeSettings.colors || [];
    const themeGradients = themeSettings.gradients || [];

    const setAttr = (key, value) => {
        updateBlockAttributes(clientId, {
            [key]: value,
        });
    };

    const getColorValue = () => {
        if (!backgroundColorSlug) return '';
        const match = themeColors.find((c) => c.slug === backgroundColorSlug);
        return match?.color || '';
    };

    const getGradientValue = () => {
        if (!backgroundGradientSlug) return '';
        const match = themeGradients.find((g) => g.slug === backgroundGradientSlug);
        return match?.gradient || '';
    };

    return (
        <PanelBody title={__('Background settings', 'gutengrid')}>
            <SelectControl
                label={__('Background type', 'gutengrid')}
                value={backgroundType || 'none'}
                options={[
                    { label: __('None', 'gutengrid'), value: 'none' },
                    { label: __('Color', 'gutengrid'), value: 'color' },
                    { label: __('Gradient', 'gutengrid'), value: 'gradient' },
                    { label: __('Image', 'gutengrid'), value: 'image' },
                ]}
                onChange={(val) => {
                    // Reset related properties when changing type
                    const updates = { backgroundType: val };
                    console.log('Background type changed:', val);
                    if (val === 'color') {
                        updates.backgroundGradientSlug = '';
                        updates.backgroundImage = '';
                    } else if (val === 'gradient') {
                        updates.backgroundColorSlug = '';
                        updates.backgroundImage = '';
                    } else if (val === 'image') {
                        updates.backgroundColorSlug = '';
                        updates.backgroundGradientSlug = '';
                    } else if (val === 'none') {
                        updates.backgroundColorSlug = '';
                        updates.backgroundGradientSlug = '';
                        updates.backgroundImage = '';
                    }

                    updateBlockAttributes(clientId, updates);
                    console.log('Updated attributes:', updates);
                }}
            />

            {backgroundType === 'color' && themeColors.length > 0 && (
                <ColorGradientControl
                    colors={themeColors}
                    value={getColorValue()}
                    onColorChange={(value) => {
                        const match = themeColors.find((c) => c.color === value);
                        if (!match) {
                            console.warn('[GutenGrid] Geen match voor color:', value);
                        }
                        setAttr('backgroundColorSlug', match?.slug || '');
                    }}
                    clearable
                />
            )}

            {backgroundType === 'gradient' && themeGradients.length > 0 && (
                <ColorGradientControl
                    gradients={themeGradients}
                    value={getGradientValue()}
                    onGradientChange={(value) => {
                        const match = themeGradients.find((g) => g.gradient === value);
                        setAttr('backgroundGradientSlug', match?.slug || '');
                    }}
                    clearable
                />
            )}

            {backgroundType === 'image' && (
                <MediaUpload
                    onSelect={(media) => {
                        if (media?.url) {
                            setAttr('backgroundImage', media.url);
                        }
                    }}
                    type="image"
                    render={({ open }) => (
                        <Button onClick={open} isSecondary>
                            {__('Select background image', 'gutengrid')}
                        </Button>
                    )}
                />
            )}

            <SelectControl
                label={__('Background width', 'gutengrid')}
                value={backgroundWidth || 'main'}
                options={[
                    { label: __('Main grid (2â€“14)', 'gutengrid'), value: 'main' },
                    { label: __('Full width', 'gutengrid'), value: 'full' },
                ]}
                onChange={(val) => setAttr('backgroundWidth', val)}
            />
        </PanelBody>
    );
};

export default GridBackgroundControl;

 

/**************************** src/grid/components/grid-position-control.js ****************************/ 
import { __experimentalNumberControl as NumberControl } from '@wordpress/components';
import { useSelect, useDispatch } from '@wordpress/data';
import { useEffect, useState } from '@wordpress/element';

import {
	getStartEndColFromClassName,
	getStartEndRowFromClassName,
	replaceColumnValuesInClass,
	replaceRowValuesInClass
} from '../css-classname';
import { getGridWidth } from '../../grid/grid-defaults';
import { __ } from '@wordpress/i18n';
import { useSupportsClassName } from '../utils/block-support';

const GridPositionControl = ({ clientId }) => {
	const { className = '' } = useSelect((select) =>
		select('core/block-editor').getBlockAttributes(clientId),
		[clientId]
	);

	const device = useSelect((select) =>
		select('core/edit-post')?.__experimentalGetPreviewDeviceType?.() || 'Desktop'
	);

	const { updateBlockAttributes } = useDispatch('core/block-editor');

	const [colStart, setColStart] = useState('');
	const [colEnd, setColEnd] = useState('');
	const [rowStart, setRowStart] = useState('');
	const [rowEnd, setRowEnd] = useState('');
	const supportsClass = useSupportsClassName(clientId);

	// Initial values bij load of class/device change
	useEffect(() => {
		const { start: cs, end: ce } = getStartEndColFromClassName(className, device);
        const { start: rs, end: re } = getStartEndRowFromClassName(className, device);

		setColStart(cs || '');
		setColEnd(ce || '');
		setRowStart(rs || '');
		setRowEnd(re || '');
	}, [className, device]);

	// Class updater
	const updateColClass = (start, end) => {
        const isValid = (val) => val === '' || (!isNaN(val) && Number(val) > 0);
        if (!isValid(start) || !isValid(end)) return;
    
        const newClassName = replaceColumnValuesInClass(className, device, Number(start), Number(end));
		updateBlockAttributes(clientId, {
			className: newClassName,
			wrapperClassname: !supportsClass ? newClassName : undefined,

		});
    };

	const updateRowClass = (start, end) => {
        const isValid = (val) => val === '' || (!isNaN(val) && Number(val) > 0);
        if (!isValid(start) || !isValid(end)) return;
    
        const newClassName = replaceRowValuesInClass(className, device, Number(start), Number(end));
		updateBlockAttributes(clientId, {
			className: newClassName,
			wrapperClassname: !supportsClass ? newClassName : undefined,
		});
    };

	const colMax = getGridWidth(device);

	return (
		<div className="gutengrid-controls">
			<NumberControl
				label={__('Column start', 'gutengrid')}
				value={colStart}
				onChange={(value) => {
					setColStart(value);
					updateColClass(value, colEnd);
				}}
				min={1}
				max={colMax}
				placeholder={__("Auto", 'gutengrid')}
			/>
			<NumberControl
				label={__('Column end', 'gutengrid')}
				value={colEnd}
				onChange={(value) => {
					setColEnd(value);
					updateColClass(colStart, value);
				}}
				min={1}
				max={colMax + 1}
				placeholder={__("Auto", 'gutengrid')}
			/>
			<NumberControl
				label={__("Row start", 'gutengrid')}
				value={rowStart}
				onChange={(value) => {
					setRowStart(value);
					updateRowClass(value, rowEnd);
				}}
				min={1}
				placeholder={__("Auto", 'gutengrid')}
			/>
			<NumberControl
				label={__("Row end", 'gutengrid')}
				value={rowEnd}
				onChange={(value) => {
					setRowEnd(value);
					updateRowClass(rowStart, value);
				}}
				min={1}
				placeholder={__("Auto", 'gutengrid')}
			/>
		</div>
	);
};

export default GridPositionControl;

 

/**************************** src/grid/components/layout-preset-toolbar.js ****************************/ 
import { ToolbarGroup, ToolbarButton } from '@wordpress/components';
import { useSelect, useDispatch } from '@wordpress/data';
import { __ } from '@wordpress/i18n';
import { replaceColumnValuesInClass, getStartEndColFromClassName } from '../css-classname';
import { HalfLeftIcon, FullCenterIcon, HalfRightIcon, } from '../../icons';
import { useSupportsClassName } from '../utils/block-support';


const PRESETS = {
    Desktop: {
        left: [2, 8],
        center: [2, 14],
        right: [8, 14],
    },
    Tablet: {
        left: [2, 8],
        center: [2, 14],
        right: [8, 14],
    },
    Mobile: {
        left: [2, 6],
        center: [2, 10],
        right: [6, 10],
    },
};

const LayoutPresetToolbar = ({ clientId }) => {
    const { className = '' } = useSelect((select) =>
        select('core/block-editor').getBlockAttributes(clientId),
        [clientId]
    );
    const device = useSelect((select) =>
        select('core/edit-post')?.__experimentalGetPreviewDeviceType?.() || 'Desktop'
    );

    const { updateBlockAttributes } = useDispatch('core/block-editor');
    const supportsClass = useSupportsClassName(clientId);

    const applyPreset = (type) => {
        const [start, end] = PRESETS[device][type];
        const newClassName = replaceColumnValuesInClass(className, device, start, end);
        updateBlockAttributes(clientId, {
            className: newClassName,
            wrapperClassname: !supportsClass ? newClassName : undefined,
        });
    };
    const currentMatches = (type) => {
        const [expectedStart, expectedEnd] = PRESETS[device][type];
        const { start, end } = getStartEndColFromClassName(className, device);
        return start === expectedStart && end === expectedEnd;
    };

    return (
        <ToolbarGroup label={__('Layout presets', 'gutengrid')}>
            <ToolbarButton
                icon={<HalfLeftIcon />}
                label={__('Left', 'gutengrid')}
                onClick={() => applyPreset('left')}
                isPressed={currentMatches('left')}
            />
            <ToolbarButton
                icon={<FullCenterIcon />}
                label={__('Main center', 'gutengrid')}
                onClick={() => applyPreset('center')}
                isPressed={currentMatches('center')}
            />
            <ToolbarButton
                icon={<HalfRightIcon />}
                label={__('Right', 'gutengrid')}
                onClick={() => applyPreset('right')}
                isPressed={currentMatches('right')}
            />
        </ToolbarGroup>
    );
};

export default LayoutPresetToolbar;

 

/**************************** src/grid/filters/withGridAlignControls.js ****************************/ 
import { createHigherOrderComponent } from '@wordpress/compose';
import { useSelect } from '@wordpress/data';
import { InspectorControls, BlockControls } from '@wordpress/block-editor';
import { addFilter } from '@wordpress/hooks';

import GridAlignControl from '../components/grid-align-control';

const withGridAlignControls = createHigherOrderComponent((BlockEdit) => (props) => {
	const { clientId, name, isSelected } = props;

	// Check of dit een child is van een gutengrid/grid
	const parentIsGrid = useSelect((select) => {
		const parentId = select('core/block-editor').getBlockRootClientId(clientId);
		const parentBlock = select('core/block-editor').getBlock(parentId);
		return parentBlock?.name === 'gutengrid/grid';
	}, [clientId]);

	if (!isSelected || !parentIsGrid) {
		return <BlockEdit {...props} />;
	}

	return (
		<>
			<BlockEdit {...props} />
			<BlockControls>
				<GridAlignControl clientId={clientId} toolbar />
			</BlockControls>
			<InspectorControls>
				<GridAlignControl clientId={clientId} />
			</InspectorControls>
		</>
	);
}, 'withGridAlignControls');

addFilter(
	'editor.BlockEdit',
	'gutengrid/grid-align-controls',
	withGridAlignControls
);

 

/**************************** src/grid/filters/withGridPositionControl.js ****************************/ 
import { createHigherOrderComponent } from '@wordpress/compose';
import { useSelect, useDispatch } from '@wordpress/data';
import { InspectorControls, BlockControls } from '@wordpress/block-editor';
import { PanelBody, ButtonGroup, Button, } from '@wordpress/components';
import { addFilter } from '@wordpress/hooks';
import { __ } from '@wordpress/i18n';
import { getLayouts } from '../../constants';

import LayoutPresetToolbar from '../components/layout-preset-toolbar';
import GridPositionControl from '../components/grid-position-control';

const withGridPositionControl = createHigherOrderComponent((BlockEdit) => (props) => {
    const { clientId, name, isSelected } = props;

    const parentIsGrid = useSelect((select) => {
        const parentId = select('core/block-editor').getBlockRootClientId(clientId);
        const parentBlock = select('core/block-editor').getBlock(parentId);
        return parentBlock?.name === 'gutengrid/grid';
    }, [clientId]);

    const currentDevice = useSelect((select) => {
        return (
            select('core/edit-site')?.__experimentalGetPreviewDeviceType?.() ||
            select('core/edit-post')?.__experimentalGetPreviewDeviceType?.() ||
            'Desktop'
        );
    }, []);

    const { __experimentalSetPreviewDeviceType: setDevice } =
        useDispatch('core/edit-site') || useDispatch('core/edit-post');


    if (!isSelected || !parentIsGrid) return <BlockEdit {...props} />;

    return (
        <>
            <BlockControls>
                <LayoutPresetToolbar clientId={clientId} />
            </BlockControls>
            <BlockEdit {...props} />
            <InspectorControls>
                <PanelBody title={__('Responsive Breakpoints', 'gutengrid')}>
                    <p className="gutengrid-help">
                        {__(
                            "Previewing your post will show your browser's breakpoint, not the currently selected one.",
                            'gutengrid'
                        )}
                    </p>
                    <ButtonGroup>
                        {getLayouts().map((layout) => (
                            <Button
                                key={layout.value}
                                isPrimary={layout.value === currentDevice}
                                onClick={() => setDevice(layout.value)}
                            >
                                {layout.label}
                            </Button>
                        ))}
                    </ButtonGroup>

                </PanelBody>
                <PanelBody title={__("Grid position", 'gutengrid')}>
                    <GridPositionControl clientId={clientId} />
                </PanelBody>
            </InspectorControls>
        </>
    );
}, 'withGridPositionControl');

// export default withGridPositionControl;
addFilter(
    'editor.BlockEdit',
    'gutengrid/grid-position-controls',
    withGridPositionControl
);
 

/**************************** src/grid/filters/withGridResizeHandles.js ****************************/ 
import { addFilter } from '@wordpress/hooks';
import { useSelect, useDispatch } from '@wordpress/data';
import ResizeGridSingle from '../resize-grid-single';
import { removeColumnClasses, replaceColumnValuesInClass } from '../css-classname'
import { useSupportsClassName } from '../utils/block-support';


const withGridResizeHandles = (BlockListBlock) => (props) => {
	const { clientId, attributes, name } = props;

	// Alleen directe children van gutengrid/grid
	const isDirectChildOfGrid = useSelect((select) => {
		const editor = select('core/block-editor');
		const parentId = editor.getBlockRootClientId(clientId);
		const parentBlock = editor.getBlock(parentId);
		return parentBlock?.name === 'gutengrid/grid';
	}, [clientId]);

	// Sla wrapper-achtige bloktypes over
	const skipTypes = [];
	if (!isDirectChildOfGrid || skipTypes.includes(name)) {
		return <BlockListBlock {...props} />;
	}

	// Update functie om className aan te passen op basis van drag
	const { updateBlockAttributes } = useDispatch('core/block-editor');
	const supportsClass = useSupportsClassName(clientId);

	return (
		<ResizeGridSingle
			clientId={clientId}
			gridWidth={12}
			onResize={({ direction, start, end, device = 'Desktop' }) => {
				if (typeof start !== 'number' || typeof end !== 'number') {
					return;
				}

				const prefix = {
					Desktop: 'd',
					Tablet: 't',
					Mobile: 'm',
				}[device];

				let newStart = start;
				let newEnd = end;

				// Fallback
				if (newStart >= newEnd) {
					return;
				}
				const newGridClass = `${prefix}-grid-${newStart}-${newEnd}`;
				// const cleanClass = removeColumnClasses(attributes.className || '', device);
				// const newClassName = `${cleanClass} ${newGridClass}`.trim();
				const newClassName = replaceColumnValuesInClass(
					attributes.className || '',
					device,
					newStart,
					newEnd
				);

				updateBlockAttributes(clientId, {
					className: newClassName,
					wrapperClassname: !supportsClass ? newClassName : undefined,

				});
			}}
		>
			<BlockListBlock {...props} />
		</ResizeGridSingle>
	);
};

addFilter(
	'editor.BlockListBlock',
	'gutengrid/with-grid-resize-handles',
	withGridResizeHandles
);


// this registers the handles for the grid
 

/**************************** src/grid/layout-grid/index.js ****************************/ 
/**
 * Internal dependencies
 */


/**
 * This contains all the grid column layout logic. That is, it knows how to move and resize columns on a grid (including a grid with multiple rows).
 * It does not handle mapping resize handles to grid positions
 */
// class LayoutGrid {
// 	constructor( attributes, device, columns ) {
// 		this.attributes = attributes;
// 		this.device = device;
// 		this.columnCount = columns;
// 	}

// }

// export default LayoutGrid;

 

/**************************** src/grid/resize-grid-single/drag-handle.js ****************************/ 
import { useEffect, useRef } from '@wordpress/element';
import classnames from 'classnames';

const DragAndNudgeHandle = ({ onStartDrag, onNudgeUp, onNudgeDown, isSelected }) => {
	const dragRef = useRef(null);

	useEffect(() => {
		const handle = dragRef.current;
		if (!handle || !onStartDrag) return;

		const onMouseDown = (e) => {
			e.preventDefault();
			e.stopPropagation();
			onStartDrag(e);
		};

		handle.addEventListener('mousedown', onMouseDown);
		handle.addEventListener('touchstart', onMouseDown);

		return () => {
			handle.removeEventListener('mousedown', onMouseDown);
			handle.removeEventListener('touchstart', onMouseDown);
		};
	}, [onStartDrag]);

	const classes = classnames('gutengrid__drag-handle-group', {
		'is-selected': isSelected,
	});

	return (
		<div className={classes}>
			<div ref={dragRef} className="gutengrid__drag-handle">ïˆ©</div>
			<button className="gutengrid__nudge-button" onClick={onNudgeUp}>ï…‚</button>
			<button className="gutengrid__nudge-button" onClick={onNudgeDown}>ï…€</button>
		</div>
	);
};

export default DragAndNudgeHandle;

 

/**************************** src/grid/resize-grid-single/index.js ****************************/ 
import { useRef, useState, useEffect } from '@wordpress/element';
import classnames from 'classnames';
// import ResizeHandle from '../resize-grid-single/resize-handle';
import ResizeHandle from './resize-handle';
import { useSelect } from '@wordpress/data';
import { getStartEndColFromClassName, getStartEndFromDom, nudgeRowValuesInClass } from '../css-classname';
import { detectHoveredCol } from '../utils/bo-grid-check';
import DragAndNudgeHandle from './drag-handle';
import { useSupportsClassName } from '../utils/block-support';
import { useDispatch } from '@wordpress/data';




const ResizeGridSingle = ({
	// className = '',
	children,
	isSelected,
	onResize,
	gridWidth = 12,
	clientId,
}) => {
	const containerRef = useRef(null);
	const [resizing, setResizing] = useState(false);
	const [dragging, setDragging] = useState(false);
	const [dragState, _setDragState] = useState({
		xPos: 0,
		width: 0,
		height: 0,
		top: 0,
		direction: null,
		start: 0,
		end: 0,
		span: 0,
		gridPixelWidth: 1,
		initialX: 0,
	});
	const dragStateRef = useRef(dragState);

	// Vervang setDragState door deze custom functie:
	const setDragState = (val) => {
		const newVal = typeof val === 'function' ? val(dragStateRef.current) : val;
		dragStateRef.current = newVal;
		_setDragState(newVal);
	};
	const [hoveredColumn, setHoveredColumn] = useState(null);
	const className = useSelect((select) => {
		return select('core/block-editor')
			.getBlockAttributes(clientId)?.className || select('core/block-editor')
				.getBlockAttributes(clientId)?.wrapperClassname || '';
	}, [clientId]);

	const device = useSelect((select) =>
		select('core/edit-post')?.__experimentalGetPreviewDeviceType?.() || 'Desktop'
	);

	const { updateBlockAttributes } = useDispatch('core/block-editor');
	const supportsClass = useSupportsClassName(clientId);
	// Apply grid classes to the editor wrapper div (like d-grid-1-6 etc.)
	useEffect(() => {
		const el = containerRef.current;
		if (!el) return;

		// Alle bestaande grid-classes verwijderen
		Array.from(el.classList).forEach((cls) => {
			if (/^[dtm]-grid-\d+-\d+$/.test(cls)) {
				el.classList.remove(cls);
			}
		});

		// Alleen de unieke d-/t-/m- classes uit className toevoegen
		const uniqueGridClasses = Array.from(
			new Set(
				className
					.split(' ')
					.filter((cls) => /^[dtm]-grid-\d+-\d+$/.test(cls))
			)
		);

		uniqueGridClasses.forEach((cls) => el.classList.add(cls));

	}, [className]);

	useEffect(() => {
		const handleHoverCol = (e) => {
			const hovered = e.detail.col;
			setHoveredColumn(hovered);
		};

		window.addEventListener('gridHoverColumn', handleHoverCol);
		return () => window.removeEventListener('gridHoverColumn', handleHoverCol);
	}, []);


	const getMouseX = (event) => {
		const { clientX, targetTouches } = event;
		return clientX || (targetTouches && targetTouches[0]?.clientX);
	};

	const onMouseDown = (ev) => {
		const { target } = ev;
		if (
			(ev.button === 0 || ev.touches) &&
			(target.dataset.resizeRight || target.dataset.resizeLeft)
		) {
			const block = target.closest('.wp-block');
			const isLeft = target.dataset.resizeLeft;
			const { width, right, left, top, height } = block.getBoundingClientRect();
			const parentWidth = block.parentNode?.offsetWidth || 1200;
			const pixelPerColumn = parentWidth / gridWidth;
			const { start, end } = getStartEndColFromClassName(className, device);

			setDragState({
				xPos: getMouseX(ev),
				width,
				height,
				top,
				direction: isLeft ? 'left' : 'right',
				gridPixelWidth: pixelPerColumn,
				start,
				end,
			});


			setResizing(true);

			// Zoek de juiste overlay van dit grid blok
			const overlay = containerRef.current?.closest('.wp-block-gutengrid-editor')?.querySelector('.gutengrid-overlay');
			if (overlay) {
				overlay.classList.add('is-resizing');
			}


			const gutenDoc = containerRef.current?.ownerDocument || document;
			gutenDoc.addEventListener('mousemove', onMouseMove);
			gutenDoc.addEventListener('mouseup', onMouseUp);
			ev.preventDefault();
			ev.stopPropagation();

		}
	};

	const onMouseMove = (ev) => {
		ev.stopPropagation();
		const mouseX = getMouseX(ev);

		setDragState((prev) => {
			const hoveredCol = detectHoveredCol(ev.clientX, ev.clientY);
			if (!onResize || hoveredCol === null) return prev;

			let newStart = Number(prev.start);
			let newEnd = Number(prev.end);

			if (prev.direction === 'left') {
				newStart = hoveredCol ? hoveredCol : prev.start;
			}
			if (prev.direction === 'right') {
				newEnd = hoveredCol ? hoveredCol + 1 : prev.end;
			}


			onResize({
				direction: prev.direction,
				start: newStart,
				end: newEnd,
				device: device,
			});

			return {
				...prev,
				start: newStart,
				end: newEnd,
				xPos: mouseX,
			};
		});

	};


	const onMouseUp = () => {

		setResizing(false);
		const overlay = containerRef.current?.closest('.wp-block-gutengrid-editor')?.querySelector('.gutengrid-overlay');
		if (overlay) {
			overlay.classList.remove('is-resizing');
		}

		const gutenDoc = containerRef.current?.ownerDocument || document;
		gutenDoc.removeEventListener('mousemove', onMouseMove);
		gutenDoc.removeEventListener('mouseup', onMouseUp);
		setHoveredColumn(null);
	};




	/***
	 * Dragging the entire block
	 */
	const onDragStart = (e) => {
		const block = containerRef.current;
		if (!block) return;

		const overlay = containerRef.current?.closest('.wp-block-gutengrid-editor')?.querySelector('.gutengrid-overlay');
		if (overlay) {
			overlay.classList.add('is-resizing');
		}

		const { start, end } = getStartEndFromDom(block, device); // of getStartEndColFromClassName(className, device)
		const parentWidth = block.parentNode?.offsetWidth || 1200;
		const pixelPerColumn = parentWidth / gridWidth;

		setDragState((prev) => ({
			...prev,
			start,
			end,
			span: end - start,
			gridPixelWidth: pixelPerColumn,
			initialX: e.clientX,
		}));

		setDragging(true);

		document.addEventListener('mousemove', onDrag);
		document.addEventListener('mouseup', onDragEnd);
		e.preventDefault();
		e.stopPropagation();
	};

	const onDrag = (e) => {
		const { span } = dragStateRef.current;
		const hoveredCol = detectHoveredCol(e.clientX, e.clientY);
		if (!onResize || !hoveredCol || span < 1) return;



		let newEnd = hoveredCol + 1;
		let newStart = newEnd - span;

		if (newStart < 1) {
			newStart = 1;
			newEnd = newStart + span;
		}
		// if (newEnd > gridWidth + 1) {
		// 	newEnd = gridWidth + 1;
		// 	newStart = newEnd - span;
		// }

		onResize({
			direction: 'move',
			start: newStart,
			end: newEnd,
			device,
		});
	};

	const onDragEnd = () => {
		setDragging(false);
		document.removeEventListener('mousemove', onDrag);
		document.removeEventListener('mouseup', onDragEnd);
		const overlay = containerRef.current?.closest('.wp-block-gutengrid-editor')?.querySelector('.gutengrid-overlay');
		if (overlay) {
			overlay.classList.remove('is-resizing');
		}

		const { start, end } = getStartEndColFromClassName(className, device);
	};
	const handleNudge = (direction) => {
		const newClassName = nudgeRowValuesInClass(className, device, direction);

		updateBlockAttributes(clientId, {
			className: newClassName,
			wrapperClassname: !supportsClass ? newClassName : undefined,
		});
	};

	const wrapperClasses = classnames(className, {
		'wp-block-gutengrid__resizing': resizing,
		'wp-block-gutengrid__resizable': true,
		'gutengrid-dragging': dragging,
	});

	return (
		<div
			className={wrapperClasses}
			onMouseDown={onMouseDown}
			onTouchStart={onMouseDown}
			ref={containerRef}
		>
			{/* Overlay handle during drag */}
			{resizing && (
				<ResizeHandle
					direction={dragState.direction}
					height={dragState.height}
					xPos={dragState.xPos}
					top={dragState.top}
					isSelected={isSelected}
				/>

			)}

			{/* Static resize handles */}
			<span className="wp-blocks-gutengrid__resize-handles">
				<div
					className="components-resizable-box__handle components-resizable-box__side-handle components-resizable-box__handle-right"
					data-resize-right
				/>
				<div
					className="components-resizable-box__handle components-resizable-box__side-handle components-resizable-box__handle-left"
					data-resize-left
				/>
			</span>
			<DragAndNudgeHandle
				onStartDrag={onDragStart}
				onNudgeUp={() => handleNudge(-1)}
				onNudgeDown={() => handleNudge(1)}
				isSelected={isSelected}
			/>

			{children}
		</div>
	);
};

export default ResizeGridSingle;

 

/**************************** src/grid/resize-grid-single/resize-handle.js ****************************/ 
/**
 * External dependencies
 */

import classnames from 'classnames';

const ResizeHandle = ( { direction, height, xPos, top, isSelected } ) => {
	const classes = classnames( 'wpcom-overlay-resize__handle', 'components-resizable-box__container', {
		'is-selected': isSelected,
	} );
	const wrapStyle = {
		height: height + 'px',
		width: xPos + 'px',
		top: top + 'px',
	};
	const dragStyle = {
		left: xPos + 'px',
	};


	const handleClasses = classnames(
		'components-resizable-box__handle',
		'components-resizable-box__side-handle',
		{
			'components-resizable-box__handle-left': direction === 'left',
			'components-resizable-box__handle-right': direction === 'right',
		}
	);

	return (
		<div className={ classes } style={ wrapStyle }>
			<span>
				{/* <div className={ handleClasses } style={ dragStyle }></div> */}
			</span>
		</div>
	);
};

export default ResizeHandle;

 

/**************************** src/grid/utils/block-support.js ****************************/ 
import { useSelect } from '@wordpress/data';
import { getBlockType } from '@wordpress/blocks';

import { getStartEndRowFromClassName } from './../css-classname';

export function useSupportsClassName(clientId) {
	return useSelect((select) => {
		const block = select('core/block-editor').getBlock(clientId);
		const blockType = getBlockType(block?.name);
		return blockType?.supports?.className !== false;
	}, [clientId]);
}

export function getMaxRowClassNames(innerBlocks) {
	const max = { d: 1, t: 1, m: 1 };

	innerBlocks.forEach((block) => {
		console.log('Row check for block:', block);
		const className = block.attributes?.className || '';
		['Desktop', 'Tablet', 'Mobile'].forEach((device) => {
			let { start, end } = getStartEndRowFromClassName(className, device);
			console.log('Start and end:', device, start, end);

			// start might not be set if the block is locked in one row (eg. d-row-2 instead of from-to like d-row-2-3)
			// if end is not set, we assume it is the same as start
			end = end || start;
			if (end && end > max[device.charAt(0).toLowerCase()]) {
				max[device.charAt(0).toLowerCase()] = end;
			}
		});
	});

	return [
		`d-row-1-${max.d}`,
		`t-row-1-${max.t}`,
		`m-row-1-${max.m}`,
	];
}
 

/**************************** src/grid/utils/bo-grid-check.js ****************************/ 
export function detectBoGridPresence() {
	const hasBoGrid = document.querySelector('body.is-bo-grid-enabled');
	if (!hasBoGrid) {
		console.warn(
			'%cBO Grid not detected on <main>. Please ensure your theme uses .bo-grid',
			'color: orange; font-weight: bold;'
		);
		return false;
	}
	return true;
}


export function detectHoveredCol(clientX, clientY) {

	// iframe for the editor canvas in tablet and mobile view
	const iframe = document.querySelector('iframe[name="editor-canvas"]');
	if (iframe && iframe.contentDocument) {
	
		const els = iframe.contentDocument.elementsFromPoint(clientX, clientY);
		const hoveredCol = Array.from(els).find(el => el.classList?.contains('gutengrid-overlay__col'));
		if (hoveredCol) {
			return Number(hoveredCol.dataset.col);
		}
		return null;
	}

	const els = document.elementsFromPoint(clientX, clientY);
	const hoveredCol = els.find(el => el.classList?.contains('gutengrid-overlay__col'));
	if (hoveredCol) {
		return Number(hoveredCol.dataset.col);
	}
	return null;
}
 

/**************************** src/grid/css-classname.js ****************************/ 
/**
 * Internal dependencies
 */


export function removeColumnClasses(classes, device) {
	if (!classes) {
		return classes;
	}

	const deviceTypeId = device.charAt(0).toLowerCase();
	const classString = String(classes);

	return classString
		.replace(/column\d-\w*-grid__\w*-\d*/g, '')
		.replace(/column\d-grid__\w*-\d*/g, '')
		.replace(/\s{2,}/, '')
		.replace(/wp-block-jetpack-layout-gutter__\w*/, '')
		.replace(/is-vertically-aligned-\w*/, '')
		.replace(/is-style-[A-Za-z-_]*/, '')
		.replace(new RegExp(`${deviceTypeId}-grid-\\d+-\\d+`, 'g'), '')
		.replace(/are-vertically-aligned-\w*/)
		.trim();
}
export function removeRowClasses(classes, device) {
	if (!classes) {
		return classes;
	}

	const deviceTypeId = device.charAt(0).toLowerCase();
	const classString = String(classes);

	return classString
		.replace(new RegExp(`${deviceTypeId}-row-\\d+-\\d+`, 'g'), '')
		.trim();
}

export function replaceColumnValuesInClass(className, device, start, end) {
	const prefix = device.charAt(0).toLowerCase();
	const newClass = (typeof start === 'number' && typeof end === 'number' && start < end)
		? `${prefix}-grid-${start}-${end}`
		: '';

	const cleaned = className
		?.split(' ')
		.filter(cls => !new RegExp(`${prefix}-grid-\\d+-\\d+`).test(cls))
		.join(' ') || '';

	return `${cleaned} ${newClass}`.trim();
}
export function replaceRowValuesInClass(className, device, start, end) {
	const prefix = device.charAt(0).toLowerCase();
	let newClass = '';

	if (typeof start === 'number' && typeof end === 'number' && start < end) {
		newClass = `${prefix}-row-${start}-${end}`;
	} else if (typeof start === 'number') {
		newClass = `${prefix}-row-${start}`;
	}

	const cleaned = className
		?.split(' ')
		.filter(cls => !new RegExp(`${prefix}-row-\\d+(-\\d+)?`).test(cls))
		.join(' ') || '';

	return `${cleaned} ${newClass}`.trim();
}
export function nudgeRowValuesInClass(className = '', device = 'Desktop', direction = 1) {
	const prefix = device.charAt(0).toLowerCase();
	const rowRegex = new RegExp(`${prefix}-row-(\\d+)(?:-(\\d+))?`);
	const match = className.match(rowRegex);

	if (!match) {
		return className;
	}

	let start = parseInt(match[1]);
	let end = match[2] ? parseInt(match[2]) : start + 1;

	start += direction;
	end += direction;

	const newClass = `${prefix}-row-${start}-${end}`;
	const cleaned = className.replace(rowRegex, '').trim();
	return `${cleaned} ${newClass}`.trim();
}
export function getStartEndColFromClassName(className = '', device = 'Desktop') {

	const prefix = device.charAt(0).toLowerCase();
	const match = className.match(new RegExp(`${prefix}-grid-(\\d+)-(\\d+)`));
	return match ? { start: parseInt(match[1], 10), end: parseInt(match[2], 10) } : { start: 1, end: 12 };
}
export function getStartEndRowFromClassName(className = '', device = 'Desktop') {
	const prefix = device.charAt(0).toLowerCase();
	const match = className.match(new RegExp(`${prefix}-row-(\\d+)(?:-(\\d+))?`));
	return match
		? {
			start: parseInt(match[1], 10),
			end: match[2] ? parseInt(match[2], 10) : undefined,
		}
		: { start: null, end: null };
}
export function getStartEndFromDom(el, device) {
	if (!el) return { start: 1, end: 12 };
	const prefix = device.charAt(0).toLowerCase();
	const match = Array.from(el.classList).find((cls) =>
		new RegExp(`${prefix}-grid-(\\d+)-(\\d+)`).test(cls)
	);
	if (match) {
		const [, start, end] = match.match(/(\d+)-(\d+)/);
		return { start: parseInt(start), end: parseInt(end) };
	}
	return { start: 1, end: 12 };
}
 

/**************************** src/grid/edit.js ****************************/ 
// Edit.js
// External dependencies
import classnames from 'classnames';

// WordPress dependencies
import {
	InnerBlocks,
	InspectorControls,
	BlockControls,
	BlockVerticalAlignmentToolbar,
} from '@wordpress/block-editor';
import { Component, createRef, useEffect } from '@wordpress/element';
import {
	PanelBody,
	ButtonGroup,
	Button,
	Disabled,
	Notice,
} from '@wordpress/components';
import { select } from '@wordpress/data';
import { __ } from '@wordpress/i18n';
import { compose } from '@wordpress/compose';

// Internal utilities & constants
import { detectBoGridPresence } from './utils/bo-grid-check';
import { removeColumnClasses } from './css-classname';
import { getLayouts } from '../constants';
import { getGridWidth } from './grid-defaults';

// Internal components
import GridBackgroundControl from './components/grid-background-control';
import GridBackground from './grid-background';
import PreviewDevice from './preview-device';
import GridOverlay from './grid-overlay';
import { getMaxRowClassNames } from './utils/block-support';

// Internal HOCs
import {
	withUpdateAlignment,
	withSetPreviewDeviceType,
	withPreviewDeviceType,
} from './higher-order';



const MINIMUM_RESIZE_SIZE = 50;
const BLOCKS_TEMPLATE = [
	['core/heading', { content: 'Lorum Ipsum', className: 'd-row-1 d-grid-2-6 t-grid-2-6 m-grid-2-5' }],
	['core/paragraph', { content: 'Lorem ipsum...', className: 'd-row-1 d-grid-6-14 t-grid-6-14 m-grid-5-10' }],
	['core/buttons', { className: 'd-row-2 d-grid-2-6 t-grid-2-6 m-grid-2-10' }, [[
		'core/button', { text: 'Click here', className: 'is-style-fill' }
	]]],
];

class Edit extends Component {
	constructor(props) {
		super(props);
		this.overlayRef = createRef();
		this.state = {
			inspectorDeviceType: 'Desktop',
			viewPort: 'Desktop',
			hasBoGrid: true,
			hoveredColumn: null,
		};
		console.log('Edit component initialized with props:', props);
	}

	componentDidMount() {
		const hasGrid = detectBoGridPresence();
		this.setState({ hasBoGrid: hasGrid });
		this.addEditorGridClasses();
		console.log('Editor component mounted with hasBoGrid:', hasGrid);
	}

	componentDidUpdate() {
		this.addEditorGridClasses();
		const { attributes, setAttributes, clientId } = this.props;

		
		if (!attributes.maxRowClasses) {
			const maxRowClasses = this.getTheRowClasses();
			setAttributes({ maxRowClasses });
		}
		if (!attributes.uniqueId) {
			setAttributes({ uniqueId: clientId });
		}

	}
	getTheRowClasses = () => {
		console.log('getTheRowClasses called');
		const { attributes } = this.props;
		const innerBlocks = select('core/block-editor').getBlock(this.props.clientId)?.innerBlocks || [];
		const maxRowClasses = getMaxRowClassNames(innerBlocks);
		return maxRowClasses;
	}
	addEditorGridClasses = () => {
		const container = this.overlayRef.current;
		if (!container) return;
		const layout = container.querySelector('.block-editor-block-list__layout');
		if (!layout) return;
		['d-full', 't-full', 'm-full', 'bo-grid'].forEach((cls) => layout.classList.add(cls));
	};
	canResizeBreakpoint(device) {
		const rect = this.overlayRef.current?.getBoundingClientRect();
		return rect && rect.width / getGridWidth(device) > MINIMUM_RESIZE_SIZE;
	}
	updateInspectorDevice(device) {
		this.setState({ inspectorDeviceType: device });
		if (this.state.viewPort !== 'Mobile') {
			this.props.setPreviewDeviceType(device);
		}
	}
	getPreviewMode() {
		if (this.props.isBlockOrPatternPreview) return 'Desktop';
		if (this.state.viewPort === 'Desktop' || this.props.previewDeviceType === 'Mobile') {
			return this.props.previewDeviceType;
		}
		return this.state.viewPort;
	}
	getInspectorMode() {
		return this.state.viewPort === 'Desktop' ? this.props.previewDeviceType : this.state.inspectorDeviceType;
	}
	render() {
		console.log('Render method called with props:', this.props);
		const {
			className,
			attributes = {},
			isSelected,
			setAttributes,
			updateAlignment,
			clientId,
		} = this.props;
		const previewMode = this.getPreviewMode();
		const inspectorDeviceType = this.getInspectorMode();
		const { verticalAlignment, backgroundType, backgroundColorSlug, backgroundGradientSlug, backgroundImage, backgroundWidth } = attributes;

		const classes = classnames(
			removeColumnClasses(className, previewMode).replace('layout-grid', 'layout-grid-editor'),
			'wp-block-gutengrid-editor',
			{
				'wp-block-jetpack-layout-tablet': previewMode === 'Tablet',
				'wp-block-jetpack-layout-desktop': previewMode === 'Desktop',
				'wp-block-jetpack-layout-mobile': previewMode === 'Mobile',
				'wp-block-jetpack-layout-resizable': this.canResizeBreakpoint(previewMode),
				[`are-vertically-aligned-${verticalAlignment}`]: verticalAlignment,
			}
		);



		return (
			<>
				<PreviewDevice
					currentViewport={this.state.viewPort}
					updateViewport={(newPort) => this.setState({ viewPort: newPort, inspectorDeviceType: newPort })}
				/>

				<div className={classes} ref={this.overlayRef}>
					<GridOverlay device={previewMode} />
					<GridBackground
						clientId={clientId}
						backgroundType={backgroundType || 'none'}
						backgroundColorSlug={backgroundColorSlug || ''}
						backgroundGradientSlug={backgroundGradientSlug || ''}
						backgroundImage={backgroundImage || ''}
						backgroundWidth={backgroundWidth || 'main'}
						maxRowClasses={this.getTheRowClasses()}
						isEditor={true}
					/>

					{!this.state.hasBoGrid && (
						<Notice status="warning" isDismissible={false}>
							<strong>{__('BO Grid missing', 'gutengrid')}</strong>
							<p>{__('This block requires the theme to implement a .bo-grid layout.', 'gutengrid')}</p>
						</Notice>
					)}
					<InnerBlocks template={BLOCKS_TEMPLATE} templateLock={false} />
				</div>

				<InspectorControls>
					<GridBackgroundControl clientId={clientId} />
					<PanelBody title={__('Responsive Breakpoints', 'gutengrid')}>
						<ButtonGroup>
							{getLayouts().map((layout) => (
								<Button
									key={layout.value}
									isPrimary={layout.value === inspectorDeviceType}
									onClick={() => this.updateInspectorDevice(layout.value)}
								>
									{layout.label}
								</Button>
							))}
						</ButtonGroup>
					</PanelBody>
				</InspectorControls>

				<BlockControls>
					<BlockVerticalAlignmentToolbar onChange={updateAlignment} value={verticalAlignment} />
				</BlockControls>
			</>
		);
	}
}

function MaybeDisabledEdit(props) {
	return (
		<Disabled.Consumer>
			{(isDisabled) => <Edit {...props} isBlockOrPatternPreview={isDisabled} />}
		</Disabled.Consumer>
	);
}

export default compose([
	withUpdateAlignment(),
	withSetPreviewDeviceType(),
	withPreviewDeviceType(),
])(MaybeDisabledEdit);

 

/**************************** src/grid/grid-background.js ****************************/ 
//  grid-background.js
import classnames from 'classnames';
import { __ } from '@wordpress/i18n';

const GridBackground = (props) => {
    console.log('GridBackground received props:', props);

    // Destructure with default values
    const {
        backgroundType = 'none',
        backgroundColorSlug = '',
        backgroundGradientSlug = '',
        backgroundImage = '',
        backgroundWidth = 'main',
        isEditor = false,
        clientId = ''
    } = props;
    let { maxRowClasses } = props;
    // Early return if no background type or it's none
    if (!backgroundType || backgroundType === 'none') {
        console.log('Early return with no background');
        return null;
    }

    try {
        if (!maxRowClasses) {
            maxRowClasses = [];
        }
        // Compute background style with validation
        let bgStyle = {};
        if (backgroundImage && backgroundType === 'image') {
            bgStyle = { backgroundImage: `url(${backgroundImage})` };
        }

        // Compute classes with validation
        let bgClass = '';
        if (backgroundType === 'color' && backgroundColorSlug) {
            bgClass = `has-${backgroundColorSlug}-background-color`;
        } else if (backgroundType === 'gradient' && backgroundGradientSlug) {
            bgClass = `has-${backgroundGradientSlug}-gradient-background`;
        }

        // Compute class names safely
        const widthClasses = backgroundWidth === 'full' ? 'd-full t-full m-full' : 'd-main t-main m-main';

        const bgClasses = classnames('gutengrid-background', {
            [widthClasses]: true,
            [bgClass]: bgClass !== ''
        });




        console.log('Rendering background with:', { bgClasses, bgStyle });

        // Render for editor
        if (isEditor) {
            console.log('Rendering background for editor');
            return (
                <div className="gutengrid-background__wrapper bo-grid" aria-hidden="true">
                    <div className={bgClasses} style={bgStyle} />
                </div>
            );
        }
        console.log('Rendering background for frontend');
        // Render for frontend
        return <div className={bgClasses} style={bgStyle} aria-hidden="true" />;
    } catch (err) {
        console.error('Error in GridBackground:', err);
        return null;
    }
};

export default GridBackground;
 

/**************************** src/grid/grid-defaults.js ****************************/ 
/**
 * Internal dependencies
 */
const GRID_COLUMNS = {
	Desktop: 14,
	Tablet: 14,
	Mobile: 10,
};

export function getGridWidth(device) { // BO-GRID defaults. Unfortunatly we can't get the actual value from the CSS
	return GRID_COLUMNS[device] || 12;
}

 

/**************************** src/grid/grid-overlay.js ****************************/ 
import { useEffect, useRef } from '@wordpress/element';

const GridOverlay = ({ device }) => {
    const columns = {
        Desktop: 14,
        Tablet: 14,
        Mobile: 10,
    }[device] || 14;

    const overlayRef = useRef();

    return (
        <div className="gutengrid-overlay bo-grid" ref={overlayRef}>
            {Array.from({ length: columns }).map((_, i) => (
                <div
                    key={i}
                    className={`gutengrid-overlay__col d-grid-${i + 1}-${i + 1} t-grid-${i + 1}-${i + 1} m-grid-${i + 1}-${i + 1}`}
                    data-col={i + 1}
                />
            ))}
        </div>
    );
};

export default GridOverlay;

 

/**************************** src/grid/higher-order.js ****************************/ 
/**
 * WordPress dependencies
 */
import { withSelect, withDispatch } from '@wordpress/data';


function isSiteEditor() {
	const siteEditorWrapper = document.querySelector( '#edit-site-editor' );
	return !! siteEditorWrapper;
}

export function withUpdateAlignment() {
	return withDispatch( ( dispatch, ownProps, registry ) => {
		return {
			/**
			 * Update all child Column blocks with a new vertical alignment setting
			 * based on whatever alignment is passed in. This allows change to parent
			 * to overide anything set on a individual column basis.
			 *
			 * @param {string} verticalAlignment the vertical alignment setting
			 */
			updateAlignment( verticalAlignment ) {
				const { clientId, setAttributes } = ownProps;
				const { updateBlockAttributes } = dispatch(
					'core/block-editor'
				);
				const { getBlockOrder } = registry.select(
					'core/block-editor'
				);

				// Update own alignment.
				setAttributes( { verticalAlignment } );

				// Update all child Column Blocks to match
				const innerBlockClientIds = getBlockOrder( clientId );
				innerBlockClientIds.forEach( ( innerBlockClientId ) => {
					updateBlockAttributes( innerBlockClientId, {
						verticalAlignment,
					} );
				} );
			},
		};
	} );
}


export function withSetPreviewDeviceType() {
	return withDispatch( ( dispatch ) => {
		return {
			setPreviewDeviceType( type ) {
				if ( isSiteEditor() ) {
					return dispatch(
						'core/edit-site'
					)?.__experimentalSetPreviewDeviceType( type );
				}

				dispatch(
					'core/edit-post'
				)?.__experimentalSetPreviewDeviceType( type );
			},
		};
	} );
}


export function withPreviewDeviceType() {
	return withSelect( ( select ) => {
		if ( isSiteEditor() ) {
			return {
				previewDeviceType: select(
					'core/edit-site'
				)?.__experimentalGetPreviewDeviceType(),
			};
		}

		return {
			previewDeviceType: select(
				'core/edit-post'
			)?.__experimentalGetPreviewDeviceType(),
		};
	} );
}

 

/**************************** src/grid/preview-device.js ****************************/ 
/**
 * WordPress dependencies
 */

import { useEffect } from '@wordpress/element';
import { useViewportMatch, useResizeObserver } from '@wordpress/compose';
import { useSelect, useDispatch } from '@wordpress/data';
import {
	Button,
	ToolbarGroup,
	MenuGroup,
	MenuItemsChoice,
	Dropdown,
} from '@wordpress/components';
import { BlockControls } from '@wordpress/block-editor';

/**
 * Internal dependencies
 */

import { getLayouts } from '../constants';

function getCurrentViewport( isMobile, isTablet ) {
	if ( isMobile ) {
		return 'Mobile';
	}

	if ( isTablet ) {
		return 'Tablet';
	}

	return 'Desktop';
}

function PreviewDevice( props ) {
	const { viewPort, updateViewport } = props;
	const {
		__experimentalSetPreviewDeviceType: setPreviewDevice,
	} = useDispatch( 'core/edit-post' ) || useDispatch( 'core/edit-site' );
	const previewDevice = useSelect(
		( select ) =>
			( select( 'core/edit-site' ) || select( 'core/edit-post' ) ).__experimentalGetPreviewDeviceType(),
		[]
	);
	const [ resizeListener, sizes ] = useResizeObserver();
	const isTablet = useViewportMatch( 'medium', '<' );
	const isMobile = useViewportMatch( 'small', '<' );

	useEffect( () => {
		const newPort = getCurrentViewport( isMobile, isTablet );

		if ( newPort !== viewPort ) {
			updateViewport( newPort );
		}
	}, [ sizes ] );

	return (
		<>
			{ resizeListener }

			{ ! isMobile && (
				<BlockControls>
					<Dropdown
						renderToggle={ ( { isOpen, onToggle } ) => (
							<ToolbarGroup>
								<Button
									aria-expanded={ isOpen }
									onClick={ onToggle }
									icon={
										getLayouts().find(
											( layout ) =>
												layout.value === previewDevice
										).icon
									}
								/>
							</ToolbarGroup>
						) }
						renderContent={ () => (
							<MenuGroup>
								<MenuItemsChoice
									value={ previewDevice }
									onSelect={ ( mode ) =>
										setPreviewDevice( mode )
									}
									choices={ getLayouts() }
								/>
							</MenuGroup>
						) }
					/>
				</BlockControls>
			) }
		</>
	);
}

export default PreviewDevice;

 

/**************************** src/grid/save.js ****************************/ 
// Save.js
import classnames from 'classnames';
import { InnerBlocks } from '@wordpress/block-editor';
import { removeColumnClasses } from './css-classname';


import GridBackground from './grid-background';


const save = ({ attributes }) => {
	const {
		className,
		backgroundType = 'none',
		backgroundColorSlug = '',
		backgroundGradientSlug = '',
		backgroundImage = '',
		backgroundWidth = 'main',
		maxRowClasses,
		uniqueId
	} = attributes;

	console.log('Save function called with attributes:', attributes);
	return (
		// <div className={classnames(removeColumnClasses(className), 'd-full', 't-full', 'm-full', 'bo-grid')}>
		<>
			<GridBackground
				clientId={uniqueId}
				backgroundType={backgroundType || 'none'}
				backgroundColorSlug={backgroundColorSlug || ''}
				backgroundGradientSlug={backgroundGradientSlug || ''}
				backgroundImage={backgroundImage || ''}
				backgroundWidth={backgroundWidth || 'main'}
				isEditor={false}
				maxRowClasses={maxRowClasses}
			/>
			<InnerBlocks.Content />
		</>
		//</div>
	);
};

export default save;

 

/**************************** src/constants.js ****************************/ 
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
import { mobile, tablet, desktop } from '@wordpress/icons';


export const DEVICE_DESKTOP = 'Desktop';
export const DEVICE_TABLET = 'Tablet';
export const DEVICE_MOBILE = 'Mobile';

export const getLayouts = () => [
	{
		value: DEVICE_DESKTOP,
		label: __( 'Desktop', 'gutengrid' ),
		icon: desktop,
	},
	{
		value: DEVICE_TABLET,
		label: __( 'Tablet', 'gutengrid' ),
		icon: tablet,
	},
	{
		value: DEVICE_MOBILE,
		label: __( 'Mobile', 'gutengrid' ),
		icon: mobile,
	},
];


export const DEVICE_BREAKPOINTS = [
	DEVICE_DESKTOP,
	DEVICE_TABLET,
	DEVICE_MOBILE,
];

 

/**************************** src/icons.js ****************************/ 
/**
 * WordPress dependencies
 */

import { Path, SVG, Rect } from '@wordpress/components';


export const HalfLeftIcon = (props) => (
	<SVG xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" {...props}>
		<Path d="M4 4h8v16H4zM14 4h6v16h-6z" fill="#ccc" />
	</SVG>
);

export const HalfRightIcon = (props) => (
	<SVG xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" {...props}>
		<Path d="M4 4h6v16H4zM12 4h8v16h-8z" fill="#ccc" />
	</SVG>
);

export const FullCenterIcon = (props) => (
	<SVG xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" {...props}>
		<Path d="M4 4h16v16H4z" fill="#ccc" />
	</SVG>
);

export const GridIcon = (props) => (
	<SVG
		viewBox="0 0 20.5 16"
		xmlns="http://www.w3.org/2000/svg"
		{...props}
	>
		<Rect x="3.5" y="0" width="3" height="16" fill="#27aae1" />
		<Rect x="0" y="0" width="3" height="16" fill="#b9e5fb" />
		<Rect x="7" y="0" width="3" height="16" fill="#27aae1" />
		<Rect x="10.5" y="0" width="3" height="16" fill="#27aae1" />
		<Rect x="14" y="0" width="3" height="16" fill="#27aae1" />
		<Rect x="17.5" y="0" width="3" height="16" fill="#b9e5fb" />
	</SVG>
);

 

/**************************** src/index.js ****************************/ 
/**
 * @wordpress/i18n
 * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-i18n/
 *
 * @package GutenGrid
 * @file index.js
 * @version 1.0.0
 *
 * @wordpress-plugin
 * Plugin Name: GutenGrid
 * Text Domain: gutengrid
 */

/* globals wp */
/* eslint-disable no-unused-vars */

/**
 * Internal dependencies
 */

/**
 * This file is the entry point for the gutengrid-editor-script handle.
 *
 * @handle gutengrid-editor-script
 */


/**
 * WordPress dependencies
 */

import { registerBlockType } from '@wordpress/blocks';
import { __ } from '@wordpress/i18n';
// import metadata from './block.json';
import '../style.scss';
import '../editor.scss';

/**
 * Internal dependencies
 */
import './grid/filters/withGridResizeHandles';
import './grid/filters/withGridPositionControl';
// import './grid/filters/withGridAlignControls'; // need to rethink this. Blocks that support alignment usually have this already.

import editGrid from './grid/edit';
import saveGrid from './grid/save';
import { GridIcon } from './icons';

const unsupportedBlocks = [
	'gravityforms/form',
];

export function registerBlock() {
	registerBlockType('gutengrid/grid', {
		title: __('Layout Grid', 'gutengrid'),
		description: __(
			'Align blocks to a global grid, with support for responsive breakpoints.',
			'gutengrid'
		),
		icon: GridIcon,
		category: 'layout',
		supports: {
			align: ['full'],
			html: false,
		},
		keywords: ['grid', 'layout', '_structure'],
		example: {
			attributes: {
				className: 'has-preview-style',
			},
			innerBlocks: [
				...Array.from({ length: 14 }).map((_, i) => {
					const index = i + 1;
					const isEdge = index === 1 || index === 14;
					const background = isEdge ? '#000' : '#B9E5FB';
					return {
						name: 'core/group',
						attributes: {
							className: `preview-col d-row-1-3 t-row-1-3 m-row-1-3 d-grid-${index}-${index} t-grid-${index}-${index} m-grid-${index}-${index} `,
							style: {
								color: { background },
								layout: { display: 'block' },
								dimensions: { minHeight: '120px', height: '100%' },
							},
						},
					};
				}),
				{
					name: 'core/paragraph',
					attributes: {
						content: '<strong>Snow Patrol</strong>',
						align: 'center',
						style: {
							typography: {
								fontSize: 48,
							},
						},
						className: 'd-row-1-2 t-row-1-2 d-grid-2-6 t-grid-2-6 m-grid-2-5 preview-handles',
					},
				},
				{
					name: 'core/paragraph',
					attributes: {
						content:
							'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
						align: 'left',
						className: 'd-row-1-4 t-row-1-4 d-grid-7-14 t-grid-7-14 m-grid-5-10 preview-handles',
						style: {
							dimensions: {
								height: '100%'
							},
							layout: { display: 'block' },
						},
					},
				},
				{
					name: 'core/buttons',
					innerBlocks: [
						{
							name: 'core/button',
							attributes: {
								text: 'Meer informatie',
								className: 'is-style-fill',
							},
						},
					],
					attributes: {
						className: 'd-row-2-3 t-row-2-3 d-grid-3-6 t-grid-3-6 m-grid-3-5 preview-handles',
					},
				},
			],
		},
		attributes: {
			backgroundType: {
				type: 'string',
				default: 'none'
			},
			backgroundColorSlug: {
				type: 'string',
				default: ''
			},
			backgroundGradientSlug: {
				type: 'string',
				default: ''
			},
			backgroundImage: {
				type: 'string',
				default: ''
			},
			backgroundWidth: {
				type: 'string',
				default: 'main'
			},
			uniqueId: {
				type: 'string'
			},
			maxRowClasses: {
				type: 'object',
				default: {}
			}
		},
		edit: editGrid,
		save: saveGrid,
	});

}
registerBlock();


// Adding wrapperClass for blocks that don't support className
wp.hooks.addFilter(
	'blocks.registerBlockType',
	'vwe/add-wrapper-classname-attribute',
	(settings, name) => {

		if (settings.supports?.className !== false || unsupportedBlocks.includes(name)) {
			return settings;
		}

		settings.attributes = {
			...settings.attributes,
			wrapperClassname: {
				type: 'string',
			},
		};
		return settings;
	}
);
 

/**************************** gutengrid.php ****************************/ 
<?php

/**
 * Plugin Name: GutenGRID â€“ Gutenberg Responsive Interface Designer
 * Plugin URI:  https://github.com/automattic/block-experiments
 * Description: GutenGRID is a Gutenberg block that gives you full control over layout structure through a CSS Breakout Grid system.
 * Version:     0.5.3
 * Author:      Xmedia
 * Author URI:  https://xmedia.nl
 * Text Domain: gutengrid
 * License:     GPL v2 or later
 * License URI: http://www.gnu.org/licenses/gpl-2.0.txt
 */

error_log("gutengrid plugin loaded");
add_action('init', function () {
    $asset_file = include plugin_dir_path(__FILE__) . 'build/index.asset.php';
    wp_register_script(
        'gutengrid-editor-script',
        plugins_url('build/index.js', __FILE__),
        $asset_file['dependencies'],
        $asset_file['version']
    );

    // TODO: JSON translations don't work. Dont know why, I've given up.

    wp_set_script_translations(
        'gutengrid-editor-script',
        'gutengrid',
        plugin_dir_path(__FILE__) . 'languages'
    );



    wp_register_style(
        'gutengrid-style',
        plugins_url('build/style-index.css', __FILE__),
        [],
        $asset_file['version']
    );

    wp_register_style(
        'gutengrid-editor-style',
        plugins_url('build/index.css', __FILE__),
        [],
        $asset_file['version']
    );

    register_block_type('gutengrid/grid', [
        'editor_script' => 'gutengrid-editor-script',
        'style' => 'gutengrid-style',
        'editor_style' => 'gutengrid-editor-style',
    ]);
});

add_filter(
    'excerpt_allowed_wrapper_blocks',
    function ($allowed_wrapper_blocks) {
        return array_merge($allowed_wrapper_blocks, ['gutengrid/grid', 'gutengrid/grid-column']);
    }
);


function gutengrid_load_textdomain()
{
    load_plugin_textdomain(
        'gutengrid',
        false,
        plugin_basename(dirname(__FILE__)) . '/languages'
    );
}
add_action('init', 'gutengrid_load_textdomain');

add_filter('render_block', 'gutengrid_apply_wrapper_classes', 10, 3);

function gutengrid_apply_wrapper_classes($block_content, $block, $instance) {
    if (empty($block['attrs']['wrapperClassname'])) {
        return $block_content;
    }

    // Check of class al in de HTML zit
    $class = $block['attrs']['wrapperClassname'];
    if (strpos($block_content, $class) !== false) {
        return $block_content;
    }

    // Voeg de wrapper toe
    return sprintf(
        '<div class="%s grid-block-wrapper">%s</div>',
        esc_attr($class),
        $block_content
    );
}
 

/**************************** webpack.test.config.js ****************************/ 
const defaultConfig = require('@wordpress/scripts/config/webpack.config');
const { merge } = require('webpack-merge');

merge(defaultConfig, {
  optimization: {
    minimize: false,
  },
});
 

